var N=null,E="",T="t",U="u",searchIndex={};
var R=["sysctl","Temperature","String","Struct","ctlflags","c_uint","option","string","sysctlerror","result","ctlvalue","try_into","try_from","borrow_mut","to_owned","clone_into","type_id","into_iter","borrow","typeid","to_string","value_type","ctltype","description","value_as","value_string","set_value","set_value_string","ctlinfo","ordering","partial_cmp","temperature","formatter","intoiterator","backtrace","SysctlError","CtlValue","CtlFlags"];

searchIndex["sysctl"]={"doc":"A simplified interface to the `sysctl` system call.","i":[[3,R[37],R[0],E,N,N],[3,"CtlInfo",E,"A structure representing control metadata",N,N],[12,"ctl_type",E,"The control type.",0,N],[12,"fmt",E,"A string which specifies the format of the OID in a…",0,N],[12,"flags",E,E,0,N],[3,"Ctl",E,"This struct represents a system control.",N,N],[12,"oid",E,E,1,N],[3,"CtlIter",E,"An iterator over Sysctl entries.",N,N],[3,R[1],E,"A custom type for temperature sysctls.",N,N],[4,R[35],E,E,N,N],[13,"NotFound",E,E,2,N],[13,"UnknownType",E,E,2,N],[13,"ExtractionError",E,E,2,N],[13,"ParseError",E,E,2,N],[13,"MissingImplementation",E,E,2,N],[13,"IoError",E,E,2,N],[13,"Utf8Error",E,E,2,N],[13,"NoReadAccess",E,E,2,N],[13,"NoWriteAccess",E,E,2,N],[13,"NotSupported",E,E,2,N],[13,"ShortRead",E,E,2,N],[12,"read","sysctl::SysctlError",E,2,N],[12,"reported",E,E,2,N],[13,"InvalidCStr",R[0],E,2,N],[4,"CtlType",E,"An Enum that represents a sysctl's type information.",N,N],[13,"Node",E,E,3,N],[13,"Int",E,E,3,N],[13,R[2],E,E,3,N],[13,"S64",E,E,3,N],[13,R[3],E,E,3,N],[13,"Uint",E,E,3,N],[13,"Long",E,E,3,N],[13,"Ulong",E,E,3,N],[13,"U64",E,E,3,N],[13,"U8",E,E,3,N],[13,"U16",E,E,3,N],[13,"S8",E,E,3,N],[13,"S16",E,E,3,N],[13,"S32",E,E,3,N],[13,"U32",E,E,3,N],[13,"None",E,E,3,N],[13,R[1],E,E,3,N],[4,R[36],E,"An Enum that holds all values returned by sysctl calls.…",N,N],[13,"None",E,E,4,N],[13,"Node",E,E,4,N],[13,"Int",E,E,4,N],[13,R[2],E,E,4,N],[13,"S64",E,E,4,N],[13,R[3],E,E,4,N],[13,"Uint",E,E,4,N],[13,"Long",E,E,4,N],[13,"Ulong",E,E,4,N],[13,"U64",E,E,4,N],[13,"U8",E,E,4,N],[13,"U16",E,E,4,N],[13,"S8",E,E,4,N],[13,"S16",E,E,4,N],[13,"S32",E,E,4,N],[13,"U32",E,E,4,N],[13,R[1],E,E,4,N],[11,"root",E,"Return an iterator over the complete sysctl tree.",5,[[],["self"]]],[11,"below",E,"Return an iterator over all sysctl entries below the given…",5,[[["ctl"]],["self"]]],[18,"RD",E,"Allow reads of variable",6,N],[18,"WR",E,"Allow writes to the variable",6,N],[18,"RW",E,E,6,N],[18,"DORMANT",E,"This sysctl is not active yet",6,N],[18,"ANYBODY",E,"All users can set this var",6,N],[18,"SECURE",E,"Permit set only if securelevel<=0",6,N],[18,"PRISON",E,"Prisoned roots can fiddle",6,N],[18,"DYN",E,"Dynamic oid - can be freed",6,N],[18,"SKIP",E,"Skip this sysctl when listing",6,N],[18,"SECURE_MASK",E,"Secure level",6,N],[18,"TUN",E,"Default value is loaded from getenv()",6,N],[18,"RDTUN",E,"Readable tunable",6,N],[18,"RWTUN",E,"Readable and writeable tunable",6,N],[18,"MPSAFE",E,"Handler is MP safe",6,N],[18,"VNET",E,"Prisons with vnet can fiddle",6,N],[18,"DYING",E,"Oid is being removed",6,N],[18,"CAPRD",E,"Can be read in capability mode",6,N],[18,"CAPWR",E,"Can be written in capability mode",6,N],[18,"STATS",E,"Statistics; not a tuneable",6,N],[18,"NOFETCH",E,"Don't fetch tunable from getenv()",6,N],[18,"CAPRW",E,"Can be read and written in capability mode",6,N],[11,"empty",E,"Returns an empty set of flags.",6,[[],[R[4]]]],[11,"all",E,"Returns the set containing all flags.",6,[[],[R[4]]]],[11,"bits",E,"Returns the raw value of the flags currently stored.",6,[[["self"]],[R[5]]]],[11,"from_bits",E,"Convert from underlying bit representation, unless that…",6,[[[R[5]]],[[R[6],[R[4]]],[R[4]]]]],[11,"from_bits_truncate",E,"Convert from underlying bit representation, dropping any…",6,[[[R[5]]],[R[4]]]],[11,"is_empty",E,"Returns `true` if no flags are currently stored.",6,[[["self"]],["bool"]]],[11,"is_all",E,"Returns `true` if all flags are currently set.",6,[[["self"]],["bool"]]],[11,"intersects",E,"Returns `true` if there are flags common to both `self`…",6,[[["self"],[R[4]]],["bool"]]],[11,"contains",E,"Returns `true` all of the flags in `other` are contained…",6,[[["self"],[R[4]]],["bool"]]],[11,"insert",E,"Inserts the specified flags in-place.",6,[[["self"],[R[4]]]]],[11,"remove",E,"Removes the specified flags in-place.",6,[[["self"],[R[4]]]]],[11,"toggle",E,"Toggles the specified flags in-place.",6,[[["self"],[R[4]]]]],[11,"set",E,"Inserts or removes the specified flags depending on the…",6,[[["self"],[R[4]],["bool"]]]],[11,"is_temperature",E,"Is this sysctl a temperature?",0,[[["self"]],["bool"]]],[11,"flags",E,"Return the flags for this sysctl.",0,[[["self"]],[R[4]]]],[11,"struct_type",E,"If the sysctl is a structure, return the structure type…",0,[[["self"]],[[R[6],[R[7]]],[R[7]]]]],[11,"min_type_size",E,E,3,[[["self"]],["usize"]]],[11,"kelvin",E,E,7,[[["self"]],["f32"]]],[11,"celsius",E,E,7,[[["self"]],["f32"]]],[11,"fahrenheit",E,E,7,[[["self"]],["f32"]]],[17,"CTL_MAXNAME",E,E,N,N],[17,"CTLTYPE",E,E,N,N],[17,"CTLTYPE_NODE",E,E,N,N],[17,"CTLTYPE_INT",E,E,N,N],[17,"CTLTYPE_STRING",E,E,N,N],[17,"CTLTYPE_S64",E,E,N,N],[17,"CTLTYPE_OPAQUE",E,E,N,N],[17,"CTLTYPE_STRUCT",E,E,N,N],[17,"CTLTYPE_UINT",E,E,N,N],[17,"CTLTYPE_LONG",E,E,N,N],[17,"CTLTYPE_ULONG",E,E,N,N],[17,"CTLTYPE_U64",E,E,N,N],[17,"CTLTYPE_U8",E,E,N,N],[17,"CTLTYPE_U16",E,E,N,N],[17,"CTLTYPE_S8",E,E,N,N],[17,"CTLTYPE_S16",E,E,N,N],[17,"CTLTYPE_S32",E,E,N,N],[17,"CTLTYPE_U32",E,E,N,N],[17,"CTLFLAG_RD",E,E,N,N],[17,"CTLFLAG_WR",E,E,N,N],[17,"CTLFLAG_RW",E,E,N,N],[17,"CTLFLAG_DORMANT",E,E,N,N],[17,"CTLFLAG_ANYBODY",E,E,N,N],[17,"CTLFLAG_SECURE",E,E,N,N],[17,"CTLFLAG_PRISON",E,E,N,N],[17,"CTLFLAG_DYN",E,E,N,N],[17,"CTLFLAG_SKIP",E,E,N,N],[17,"CTLFLAG_TUN",E,E,N,N],[17,"CTLFLAG_RDTUN",E,E,N,N],[17,"CTLFLAG_RWTUN",E,E,N,N],[17,"CTLFLAG_MPSAFE",E,E,N,N],[17,"CTLFLAG_VNET",E,E,N,N],[17,"CTLFLAG_DYING",E,E,N,N],[17,"CTLFLAG_CAPRD",E,E,N,N],[17,"CTLFLAG_CAPWR",E,E,N,N],[17,"CTLFLAG_STATS",E,E,N,N],[17,"CTLFLAG_NOFETCH",E,E,N,N],[17,"CTLFLAG_CAPRW",E,E,N,N],[17,"CTLFLAG_SECURE1",E,E,N,N],[17,"CTLFLAG_SECURE2",E,E,N,N],[17,"CTLFLAG_SECURE3",E,E,N,N],[17,"CTLMASK_SECURE",E,E,N,N],[17,"CTLSHIFT_SECURE",E,E,N,N],[8,"Sysctl",E,E,N,N],[10,"new",E,"Construct a Ctl from the name.",8,[[["str"]],[[R[8]],[R[9],[R[8]]]]]],[10,"name",E,"Returns a result containing the sysctl name on success, or…",8,[[["self"]],[[R[8]],[R[7]],[R[9],[R[7],R[8]]]]]],[10,R[21],E,"Returns a result containing the sysctl value type on…",8,[[["self"]],[[R[8]],[R[22]],[R[9],[R[22],R[8]]]]]],[10,R[23],E,"Returns a result containing the sysctl description if…",8,[[["self"]],[[R[8]],[R[7]],[R[9],[R[7],R[8]]]]]],[10,"value",E,"Returns a result containing the sysctl value on success,…",8,[[["self"]],[[R[9],[R[10],R[8]]],[R[10]],[R[8]]]]],[10,R[24],E,"A generic method that takes returns a result containing…",8,[[["self"]],[[R[8]],[R[9],["box",R[8]]],["box"]]]],[10,R[25],E,"Returns a result containing the sysctl value as String on…",8,[[["self"]],[[R[8]],[R[7]],[R[9],[R[7],R[8]]]]]],[10,R[26],E,"Sets the value of a sysctl. Fetches and returns the new…",8,[[["self"],[R[10]]],[[R[9],[R[10],R[8]]],[R[10]],[R[8]]]]],[10,R[27],E,"Sets the value of a sysctl with input as string. Fetches…",8,[[["self"],["str"]],[[R[8]],[R[7]],[R[9],[R[7],R[8]]]]]],[10,"flags",E,"Get the flags for a sysctl.",8,[[["self"]],[[R[9],[R[4],R[8]]],[R[4]],[R[8]]]]],[10,"info",E,"Returns a Result containing the control metadata for a…",8,[[["self"]],[[R[28]],[R[9],[R[28],R[8]]],[R[8]]]]],[11,"into",E,E,6,[[],[U]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[14],E,E,6,[[["self"]],[T]]],[11,R[15],E,E,6,[[[T],["self"]]]],[11,R[11],E,E,6,[[],[R[9]]]],[11,R[12],E,E,6,[[[U]],[R[9]]]],[11,R[13],E,E,6,[[["self"]],[T]]],[11,R[18],E,E,6,[[["self"]],[T]]],[11,R[16],E,E,6,[[["self"]],[R[19]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[11],E,E,0,[[],[R[9]]]],[11,R[12],E,E,0,[[[U]],[R[9]]]],[11,R[13],E,E,0,[[["self"]],[T]]],[11,R[18],E,E,0,[[["self"]],[T]]],[11,R[16],E,E,0,[[["self"]],[R[19]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[17],E,E,1,[[],["i"]]],[11,R[14],E,E,1,[[["self"]],[T]]],[11,R[15],E,E,1,[[[T],["self"]]]],[11,R[11],E,E,1,[[],[R[9]]]],[11,R[12],E,E,1,[[[U]],[R[9]]]],[11,R[13],E,E,1,[[["self"]],[T]]],[11,R[18],E,E,1,[[["self"]],[T]]],[11,R[16],E,E,1,[[["self"]],[R[19]]]],[11,"into",E,E,5,[[],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[17],E,E,5,[[],["i"]]],[11,R[11],E,E,5,[[],[R[9]]]],[11,R[12],E,E,5,[[[U]],[R[9]]]],[11,R[13],E,E,5,[[["self"]],[T]]],[11,R[18],E,E,5,[[["self"]],[T]]],[11,R[16],E,E,5,[[["self"]],[R[19]]]],[11,"into",E,E,7,[[],[U]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[14],E,E,7,[[["self"]],[T]]],[11,R[15],E,E,7,[[[T],["self"]]]],[11,R[11],E,E,7,[[],[R[9]]]],[11,R[12],E,E,7,[[[U]],[R[9]]]],[11,R[13],E,E,7,[[["self"]],[T]]],[11,R[18],E,E,7,[[["self"]],[T]]],[11,R[16],E,E,7,[[["self"]],[R[19]]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[20],E,E,2,[[["self"]],[R[7]]]],[11,R[11],E,E,2,[[],[R[9]]]],[11,R[12],E,E,2,[[[U]],[R[9]]]],[11,R[13],E,E,2,[[["self"]],[T]]],[11,R[18],E,E,2,[[["self"]],[T]]],[11,R[16],E,E,2,[[["self"]],[R[19]]]],[11,"as_fail",E,E,2,[[["self"]],["fail"]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[14],E,E,3,[[["self"]],[T]]],[11,R[15],E,E,3,[[[T],["self"]]]],[11,R[11],E,E,3,[[],[R[9]]]],[11,R[12],E,E,3,[[[U]],[R[9]]]],[11,R[13],E,E,3,[[["self"]],[T]]],[11,R[18],E,E,3,[[["self"]],[T]]],[11,R[16],E,E,3,[[["self"]],[R[19]]]],[11,"into",E,E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[20],E,E,4,[[["self"]],[R[7]]]],[11,R[11],E,E,4,[[],[R[9]]]],[11,R[12],E,E,4,[[[U]],[R[9]]]],[11,R[13],E,E,4,[[["self"]],[T]]],[11,R[18],E,E,4,[[["self"]],[T]]],[11,R[16],E,E,4,[[["self"]],[R[19]]]],[11,"new",E,E,1,[[["str"]],[[R[8]],[R[9],[R[8]]]]]],[11,"name",E,E,1,[[["self"]],[[R[8]],[R[7]],[R[9],[R[7],R[8]]]]]],[11,R[21],E,E,1,[[["self"]],[[R[8]],[R[22]],[R[9],[R[22],R[8]]]]]],[11,R[23],E,E,1,[[["self"]],[[R[8]],[R[7]],[R[9],[R[7],R[8]]]]]],[11,"value",E,E,1,[[["self"]],[[R[9],[R[10],R[8]]],[R[10]],[R[8]]]]],[11,R[24],E,E,1,[[["self"]],[[R[8]],[R[9],["box",R[8]]],["box"]]]],[11,R[25],E,E,1,[[["self"]],[[R[8]],[R[7]],[R[9],[R[7],R[8]]]]]],[11,R[26],E,E,1,[[["self"],[R[10]]],[[R[9],[R[10],R[8]]],[R[10]],[R[8]]]]],[11,R[27],E,E,1,[[["self"],["str"]],[[R[8]],[R[7]],[R[9],[R[7],R[8]]]]]],[11,"flags",E,E,1,[[["self"]],[[R[9],[R[4],R[8]]],[R[4]],[R[8]]]]],[11,"info",E,E,1,[[["self"]],[[R[28]],[R[9],[R[28],R[8]]],[R[8]]]]],[11,"next",E,E,5,[[["self"]],[R[6]]]],[11,"from",E,E,2,[[["error"]],["self"]]],[11,"from",E,E,2,[[["utf8error"]],["self"]]],[11,"from",E,E,2,[[["frombyteswithnulerror"]],["self"]]],[11,"from",E,E,3,[[["u32"]],["self"]]],[11,"from",E,E,3,[[[R[10]]],["self"]]],[11,R[30],E,E,6,[[["self"],[R[4]]],[[R[6],[R[29]]],[R[29]]]]],[11,"lt",E,E,6,[[["self"],[R[4]]],["bool"]]],[11,"le",E,E,6,[[["self"],[R[4]]],["bool"]]],[11,"gt",E,E,6,[[["self"],[R[4]]],["bool"]]],[11,"ge",E,E,6,[[["self"],[R[4]]],["bool"]]],[11,R[30],E,E,4,[[["self"],[R[10]]],[[R[6],[R[29]]],[R[29]]]]],[11,"lt",E,E,4,[[["self"],[R[10]]],["bool"]]],[11,"le",E,E,4,[[["self"],[R[10]]],["bool"]]],[11,"gt",E,E,4,[[["self"],[R[10]]],["bool"]]],[11,"ge",E,E,4,[[["self"],[R[10]]],["bool"]]],[11,R[30],E,E,7,[[["self"],[R[31]]],[[R[6],[R[29]]],[R[29]]]]],[11,"lt",E,E,7,[[["self"],[R[31]]],["bool"]]],[11,"le",E,E,7,[[["self"],[R[31]]],["bool"]]],[11,"gt",E,E,7,[[["self"],[R[31]]],["bool"]]],[11,"ge",E,E,7,[[["self"],[R[31]]],["bool"]]],[11,"eq",E,E,1,[[["self"],["ctl"]],["bool"]]],[11,"ne",E,E,1,[[["self"],["ctl"]],["bool"]]],[11,"eq",E,E,6,[[["self"],[R[4]]],["bool"]]],[11,"ne",E,E,6,[[["self"],[R[4]]],["bool"]]],[11,"eq",E,E,0,[[["self"],[R[28]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[28]]],["bool"]]],[11,"eq",E,E,3,[[["self"],[R[22]]],["bool"]]],[11,"eq",E,E,4,[[["self"],[R[10]]],["bool"]]],[11,"ne",E,E,4,[[["self"],[R[10]]],["bool"]]],[11,"eq",E,E,7,[[["self"],[R[31]]],["bool"]]],[11,"ne",E,E,7,[[["self"],[R[31]]],["bool"]]],[11,R[17],E,E,1,[[]]],[11,"extend",E,E,6,[[["self"],[R[33]]]]],[11,"clone",E,E,1,[[["self"]],["ctl"]]],[11,"clone",E,E,6,[[["self"]],[R[4]]]],[11,"clone",E,E,3,[[["self"]],[R[22]]]],[11,"clone",E,E,7,[[["self"]],[R[31]]]],[11,"cmp",E,E,6,[[["self"],[R[4]]],[R[29]]]],[11,"hash",E,E,6,[[["self"],["__h"]]]],[11,"fmt",E,E,2,[[["self"],[R[32]]],[R[9]]]],[11,"fmt",E,E,4,[[[R[32]],["self"]],[R[9]]]],[11,"fmt",E,E,1,[[["self"],[R[32]]],[R[9]]]],[11,"fmt",E,E,2,[[["self"],[R[32]]],[R[9]]]],[11,"fmt",E,E,6,[[["self"],[R[32]]],[R[9]]]],[11,"fmt",E,E,0,[[["self"],[R[32]]],[R[9]]]],[11,"fmt",E,E,3,[[["self"],[R[32]]],[R[9]]]],[11,"fmt",E,E,4,[[["self"],[R[32]]],[R[9]]]],[11,"fmt",E,E,7,[[["self"],[R[32]]],[R[9]]]],[11,"sub",E,"Returns the set difference of the two sets of flags.",6,[[[R[4]]],[R[4]]]],[11,"sub_assign",E,"Disables all flags enabled in the set.",6,[[["self"],[R[4]]]]],[11,"not",E,"Returns the complement of this set of flags.",6,[[],[R[4]]]],[11,"bitand",E,"Returns the intersection between the two sets of flags.",6,[[[R[4]]],[R[4]]]],[11,"bitor",E,"Returns the union of the two sets of flags.",6,[[[R[4]]],[R[4]]]],[11,"bitxor",E,"Returns the left flags, but with all the right flags…",6,[[[R[4]]],[R[4]]]],[11,"bitand_assign",E,"Disables all flags disabled in the set.",6,[[["self"],[R[4]]]]],[11,"bitor_assign",E,"Adds the set of flags.",6,[[["self"],[R[4]]]]],[11,"bitxor_assign",E,"Toggles the set of flags.",6,[[["self"],[R[4]]]]],[11,"from_iter",E,E,6,[[[R[33]]],[R[4]]]],[11,"fmt",E,E,6,[[["self"],[R[32]]],[R[9]]]],[11,"fmt",E,E,6,[[["self"],[R[32]]],[R[9]]]],[11,"fmt",E,E,6,[[["self"],[R[32]]],[R[9]]]],[11,"fmt",E,E,6,[[["self"],[R[32]]],[R[9]]]],[11,"from_str",E,E,1,[[["str"]],[R[9]]]],[11,"name",E,E,2,[[["self"]],[[R[6],["str"]],["str"]]]],[11,"cause",E,E,2,[[["self"]],[[R[6],["fail"]],["fail"]]]],[11,R[34],E,E,2,[[["self"]],[[R[34]],[R[6],[R[34]]]]]]],"p":[[3,"CtlInfo"],[3,"Ctl"],[4,R[35]],[4,"CtlType"],[4,R[36]],[3,"CtlIter"],[3,R[37]],[3,R[1]],[8,"Sysctl"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);